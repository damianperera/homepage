name: deploy
on:
  push:
    branches: ["main"]
    paths-ignore: ["**/*.md"] # Ignore changes to markdown files
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *"

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache dependencies
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: client/web/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        working-directory: client/web/
        run: npm ci

      - name: Build
        working-directory: client/web/
        run: npm run build

      - name: Create data directory
        run: |
          mkdir client/web/build/static/data/

      - name: Scrape Pragmatic Engineer
        run: |
          curl https://www.toptal.com/developers/feed2json/convert?url=https://newsletter.pragmaticengineer.com/feed > client/web/build/static/data/pragmaticEngineer.json
          cat client/web/build/static/data/pragmaticEngineer.json
          cd client/web/build/ && ls -lR | more

      - name: Package
        shell: bash
        working-directory: client/web/
        run: |
          tar \
            --dereference --hard-dereference \
            --directory build/ \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .

      - name: Upload artifact
        uses: actions/upload-artifact@main
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          retention-days: ${{ inputs.retention-days }}

  # Deploy job
  deploy:
    needs: build
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
